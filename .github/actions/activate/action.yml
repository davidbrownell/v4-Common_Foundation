# ----------------------------------------------------------------------
# ----------------------------------------------------------------------
# ----------------------------------------------------------------------
#
# This file is the result of a code generation process; any changes made
# to this file will be overwritten during the next code generation
# invocation. Any changes MUST be made in the source file rather than in
# this one.
#
#     Code Generator:         Jinja2
#     Input Filename:         actions/activate/action.jinja2.yml
#     Generated Date:         2022-11-08 08:49:53.143800
#
# ----------------------------------------------------------------------
# ----------------------------------------------------------------------
# ----------------------------------------------------------------------

# ----------------------------------------------------------------------
# |
# |  action.yml
# |
# |  David Brownell <db@DavidBrownell.com>
# |      2022-10-28 10:56:24
# |
# ----------------------------------------------------------------------
# |
# |  Copyright David Brownell 2022
# |  Distributed under the Boost Software License, Version 1.0. See
# |  accompanying file LICENSE_1_0.txt or copy at
# |  http://www.boost.org/LICENSE_1_0.txt.
# |
# ----------------------------------------------------------------------
name: Activate
description: Runs `Activate` on the repository.

inputs:
  repo_dir:                                 {type: string, required: true}
  os:                                       {type: string, required: true}
  configuration:                            {type: string, required: true}
  shell_name:                               {type: string, required: true}

outputs:
  activate_statement:
    description: The command to activate the environment that can be used by other composite actions.
    value: ${{ steps.activate_statement.outputs.activate_statement }}

runs:
  using: composite
  steps:
    # This code is attempting to create the activate command given the following constraints:
    #   - These steps must work on both Windows and Linux
    #   - GitHub actions don't support multiple steps with the same id (meaning we can't conditionally execute one technique or the other)

    - name: "[Impl] Set Activate Statement Variables (ubuntu)"
      if: ${{ startsWith(inputs.os, 'ubuntu') }}
      run: |
        if [[ "${{ inputs.configuration }}" == "None" ]]; then
          export _activate_statement="pushd ${{ inputs.repo_dir }} > /dev/null && . ./Activate.sh --debug"
        else
          export _activate_statement="pushd ${{ inputs.repo_dir }} > /dev/null && . ./Activate.sh ${{ inputs.configuration }} --debug"
        fi

        echo "_activate_statement=${_activate_statement}" >> $GITHUB_ENV

      shell: ${{ inputs.shell_name }}

    - name: "[Impl] Set Activate Statement Variables (windows)"
      if: ${{ startsWith(inputs.os, 'windows') }}
      run: |
        if ( "${{ inputs.configuration }}" -eq "None" ) {
          $env:_activate_statement="pushd ${{ inputs.repo_dir }} && Activate.cmd --debug"
        }
        else {
          $env:_activate_statement="pushd ${{ inputs.repo_dir }} && Activate.cmd ${{ inputs.configuration }} --debug"
        }

        echo "_activate_statement=$env:_activate_statement" >> $env:GITHUB_ENV

      shell: powershell

    - name: Activate Statement
      id: activate_statement
      shell: ${{ inputs.shell_name }}
      run: |
        python -c "import os; f = open(os.getenv('GITHUB_OUTPUT'), 'a+'); f.write('activate_statement={}\n'.format(os.getenv('_activate_statement'))); f.close();"
        python -c "import os; f = open(os.getenv('GITHUB_ENV'), 'a+'); f.write('_activate_statement=\n'); f.close();"

    - name: Activate
      run: ${{ steps.activate_statement.outputs.activate_statement }}
      shell: ${{ inputs.shell_name }}
